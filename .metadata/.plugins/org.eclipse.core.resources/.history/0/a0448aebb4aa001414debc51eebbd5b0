/*
 *     <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <2015>  <Edwin Rodriguez eorodrig@ualberta.ca>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.eorodrig.TravelLogger;

import java.text.DecimalFormat;
import java.util.Date;

import android.text.format.DateFormat;

public class Claim implements Comparable<Claim>{

	/*These are the basic claim attributes*/
	protected String claimName;
	protected String claimDescription;
	
	protected String startDate;
	protected String endDate;
	
	protected Date start;
	protected Date end;

	/*These this holds a formatted string for total amount*/
	protected String totalAmount;
	
	/*these are the base currencies set to 0*/
	protected double eurCurrency = 0;
	protected double usdCurrency = 0;
	protected double cadCurrency = 0;
	protected double gbpCurrency = 0;
	protected double rubCurrency = 0;
	protected double cnyCurrency = 0;
	
	/*This holds a string reprentation of the status of the claim*/
	protected String claimStatus;
	
	//this holds boolean to see if the claim is editable
	protected boolean editable;
	
	//this is an list that holds all the claim expenses
	protected ExpenseList expenseList;
	
	
	

	

	
	/**
	 * This is a the constructor for a claim. Every claim needs the following parameters.
	 * We also init the claim amount to 0.
	 * @param name = Claim Name
	 * @param description = claim description
	 * @param start = Start Date
	 * @param end = End Date
	 * @param currencyType = Currency Type for Claim
	 */
	public Claim(String name, String description, Date start, Date end) {
		this.claimName = name;
		this.claimDescription = description;
		this.start = start;
		this.end = end;
		this.claimStatus = "In Progress";
		this.expenseList = new ExpenseList();
		this.formatCost();
		this.editable = true;

	}
	
	
	
	/////////////////////////////////////////
	/*
	 * This is the getter and setter for the claim status
	 * 
	 */
	///////////////////////////////////////
	/**
	 * This will return the status of a claim.
	 * @return	= Status of the claim
	 */
	public String getStatus(){
		return this.claimStatus;
	}
	
	/**
	 * This updates the claim status
	 * @param status = the new claim status
	 */
	public void setStatus(String status){
		this.claimStatus = status;
	}

	///////////////////////////////////////////
	/*
	 * Editting claim methods
	 */
	///////////////////////////////////////
	/**
	 * This is is a master edit claim method. it updates a claim
	 * We also init the claim amount to 0.
	 * @param name = Claim Name
	 * @param description = claim description
	 * @param start = Start Date
	 * @param end = End Date
	 * @param currencyType = Currency Type for Claim
	 */
	public void editClaim(String name, String description, Date start, Date end) {
		this.claimName = name;
		this.claimDescription = description;
		this.start = start;
		this.end = end;

	}
	
	
	///////////////////////////
	/*
	 * These are the getters for the basic attributes
	 */
	////////////////////////////////
	/**
	 * This gets the name of the claim
	 * @return
	 */
	public String getName(){
		return this.claimName;
	}
	
	
	/**
	 * This gets the description of the claim
	 * @return
	 */
	public String getDescription(){
		return claimDescription;
	}
	
	
	/**
	 * This gets the start date for the claim
	 * @return
	 */
	public Date getStartDate(){
		return start;
	}
	
	
	/**
	 * This gets the end date for the claim
	 * @return
	 */
	public Date getEndDate(){
		return end;
	}


	/**
	 * This gets all the expenses associated with a claim
	 * @return
	 */
	
	public ExpenseList getExpenses(){
		
		return this.expenseList;
	}
	
	
	
	//////////////////////
	/*
	 * This is needed for the listView
	 * 
	 */
	////////////////////////
	/**
	 * This method returns a formatted string of a claim. It is in the form required by the ViewTestList
	 */
	
	public String toString(){
		
		//we need this item to format our dates
		DateFormat dateFormat = new DateFormat();
		
		//this is where we format the start and end dates
		this.startDate = dateFormat.format("dd-MMM-yyyy", this.start).toString();
		this.endDate = dateFormat.format("dd-MMM-yyyy", this.end).toString();
		
		//return the formatted string
		return this.claimName+  "\n" + this.claimDescription +"\n" + this.claimStatus  + "\n" + this.startDate + " to " + this.endDate + totalAmount   ; 
	}

	
	
	
	//////////////////////////////
	/*
	 *Currency methods
	 */
	/////////////////////
	/**
	 *  This will format the claim value based on the currency values
	 *  It will ignore 0 valued currencies
	 *  if empty, it will return Total: 0.00 USD
	 */
	public void formatCost(){
		String currencyString = "";
		DecimalFormat decimalFormat = new DecimalFormat("#.##");
		

		if (eurCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(eurCurrency)  + " EUR";
		if (usdCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(usdCurrency)  + " USD";
		if (cadCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(cadCurrency)  + " CAD";
		if (gbpCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(gbpCurrency)  + " GBP";
		if (rubCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(rubCurrency)  + " RUB";
		if (cnyCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(cnyCurrency)  + " CNY";
		
		if (currencyString.equals(""))
			currencyString =  "\n" + "Total: 0.00 USD";
		
		this.totalAmount = currencyString;
			
		
		

	}


	/**
	 * this will add up all the expenses in the expense list
	 */
	public void sumExpenses() {
		
		//this will return all currency values to 0
		this.resetCosts();
		
		//for each expense, add the values to the currency values
		for (Expense expense: expenseList.getExpenseList()){
			
				this.addExpense(Double.valueOf(expense.getAmount()), expense.getCurrency());

		}

		//format the claim value
		this.formatCost();
	}
	

	
	/**
	 * This will reset all the currency values to 0
	 */
	private void resetCosts() {
		eurCurrency = 0;
		usdCurrency = 0;
		cadCurrency = 0;
		gbpCurrency = 0;
		rubCurrency = 0;
		cnyCurrency = 0;
		
	}


	/**
	 * This will add a selected amount of a selected currency to the object
	 * @param amount =amount
	 * @param currency	= type of currency (looks for 3 digit code)
	 */
	
	private void addExpense(double amount, String currency){
		if (currency.toLowerCase().contains("eur"))
		{
			this.eurCurrency += amount;
		}
		else if (currency.toLowerCase().contains("usd"))
		{
			this.usdCurrency += amount;
		}
		else if (currency.toLowerCase().contains("cad"))
		{
			this.cadCurrency += amount;
		}
		else if (currency.toLowerCase().contains("gbp"))
		{
			this.gbpCurrency += amount;
		}
		else if (currency.toLowerCase().contains("rub"))
		{
			this.rubCurrency += amount;
		}
		else if (currency.toLowerCase().contains("cny"))
		{
			this.cnyCurrency += amount;
		}
		
	}
	


/**
 * This will 	
 */
@Override
public int compareTo(Claim rhs) {
	if (this.getStartDate().before(rhs.getStartDate()))
	{
		return -1;
	}
	else if (this.getStartDate().after(rhs.getStartDate()))
	{
		return 1;
	}
	else if (this.getStartDate().equals(rhs.getStartDate()))
	{
		if (this.getEndDate().before(rhs.getEndDate()))
		{
			return -1;
		}
		else if (this.getEndDate().after(rhs.getEndDate()))
		{
			return -1;
		}

	}

		return 0;
}


public void submit(){
	claimStatus = "Submitted";
	editable = false;
}
	
public void approve(){
	claimStatus = "Approved";
	editable = false;
}

public void returned(){
	claimStatus = "Returned";
	editable = true;
}


public boolean isEditable(){
	return editable;
}
}
