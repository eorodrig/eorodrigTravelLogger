package com.eorodrig.TravelLogger;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;

import android.text.format.DateFormat;

public class Claim {

	protected String claimName;
	protected String claimDescription;
	
	protected String startDate;
	protected String endDate;
	
	protected Date start;
	protected Date end;

	protected String totalAmount;
	
	protected String claimStatus;
	
	
	protected ExpenseList expenseList;
	
	
	
	protected double eurCurrency = 0;
	protected double usdCurrency = 0;
	protected double cadCurrency = 0;
	protected double gbpCurrency = 0;
	protected double rubCurrency = 0;
	protected double cnyCurrency = 0;
	
	
	
	/**
	 * This is a the constructor for a claim. Every claim needs the following parameters.
	 * We also init the claim amount to 0.
	 * @param name = Claim Name
	 * @param description = claim description
	 * @param start = Start Date
	 * @param end = End Date
	 * @param currencyType = Currency Type for Claim
	 */
	public Claim(String name, String description, Date start, Date end) {
		this.claimName = name;
		this.claimDescription = description;
		this.start = start;
		this.end = end;
		this.claimStatus = "In Progress";
		this.expenseList = new ExpenseList();
		this.formatCost();

	}
	
		

	
	
	/**
	 * This will return the status of a claim.
	 * @return	= Status of the claim
	 */
	public String getStatus(){
		return this.claimStatus;
	}
	
	/**
	 * This updates the claim status
	 * @param status = the new claim status
	 */
	public void setStatus(String status){
		this.claimStatus = status;
	}

	
	/*
	 * Editting claim methods
	 */
	
	/**
	 * This is is a master edit claim method. it updates a claim
	 * We also init the claim amount to 0.
	 * @param name = Claim Name
	 * @param description = claim description
	 * @param start = Start Date
	 * @param end = End Date
	 * @param currencyType = Currency Type for Claim
	 */
	public void editClaim(String name, String description, Date start, Date end) {
		this.claimName = name;
		this.claimDescription = description;
		this.start = start;
		this.end = end;

	}
	
	/**
	 * This gets the name of the claim
	 * @return
	 */
	public String getName(){
		return this.claimName;
	}
	
	
	/**
	 * This gets the description of the claim
	 * @return
	 */
	public String getDescription(){
		return claimDescription;
	}
	
	
	/**
	 * This gets the start date for the claim
	 * @return
	 */
	public Date getStartDate(){
		return start;
	}
	
	
	/**
	 * This gets the end date for the claim
	 * @return
	 */
	public Date getEndDate(){
		return end;
	}


	/**
	 * This gets all the expenses associated with a claim
	 * @return
	 */
	
	public ExpenseList getExpenses(){
		
		return this.expenseList;
	}
	
	
	/*
	 * This is needed for the listView
	 * 
	 */
	/**
	 * This method returns a formatted string of a claim. It is in the form required by the ViewTestList
	 */
	
	public String toString(){
		
		DateFormat dateFormat = new DateFormat();
		
		
		this.startDate = dateFormat.format("dd-MMM-yyyy", this.start).toString();
		this.endDate = dateFormat.format("dd-MMM-yyyy", this.end).toString();
		
		return this.claimName + "\n" + this.claimDescription + "\n" + this.startDate + " to " + this.endDate + totalAmount   ; 
	}

	
	public void formatCost(){
		String currencyString = "";
		DecimalFormat decimalFormat = new DecimalFormat("#.##");
		

		if (eurCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(eurCurrency)  + " EUR";
		if (usdCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(usdCurrency)  + " USD";
		if (cadCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(cadCurrency)  + " CAD";
		if (gbpCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(gbpCurrency)  + " GBP";
		if (rubCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(rubCurrency)  + " RUB";
		if (cnyCurrency >0)
			currencyString = currencyString +  "\n" + "Total: " + decimalFormat.format(expenseList.getCnyCurrency())  + " CNY";
		
		if (currencyString.equals(""))
			currencyString =  "\n" + "Total: 0.00 USD";
		
		this.totalAmount = currencyString;
			
		
		

	}





	public void sumExpenses() {

		for (Expense expense: expenseList.getExpenseList()){
			
				this.addExpense(Double.valueOf(expense.getAmount()), expense.getCurrency());
			
			
		}
		
	}
	

	
	
	/**
	 * This will add a selected amount of a selected currency to the object
	 * @param amount =amount
	 * @param currency	= type of currency (looks for 3 digit code)
	 */
	
	private void addExpense(double amount, String currency){
		if (currency.toLowerCase().contains("eur"))
		{
			this.eurCurrency += amount;
		}
		else if (currency.toLowerCase().contains("usd"))
		{
			this.usdCurrency += amount;
		}
		else if (currency.toLowerCase().contains("cad"))
		{
			this.cadCurrency += amount;
		}
		else if (currency.toLowerCase().contains("gbp"))
		{
			this.gbpCurrency += amount;
		}
		else if (currency.toLowerCase().contains("rub"))
		{
			this.rubCurrency += amount;
		}
		else if (currency.toLowerCase().contains("cny"))
		{
			this.cnyCurrency += amount;
		}
		
	}
	

	
	
}
